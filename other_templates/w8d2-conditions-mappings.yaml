AWSTemplateFormatVersion: "2010-09-09"      # Version declaration for CloudFormation syntax
Description: "Week 8 Day 2 - Full stack with Parameters, Mappings, Conditions (teaching version)"

# ----------------------------
# PARAMETERS = user-provided values at deploy time (with defaults)
# ----------------------------
Parameters:
  EnvType:                                  # choose environment (affects instance size)
    Type: String
    Default: dev
    AllowedValues: [dev, prod]
    Description: "Environment type: dev (small) or prod (large)."

  VpcCidr:
    Type: String
    Default: 10.3.0.0/16
    Description: "CIDR block for the VPC"

  PublicSubnet1Cidr:
    Type: String
    Default: 10.3.1.0/24
    Description: "CIDR for first public subnet (AZ1)"

  PublicSubnet2Cidr:
    Type: String
    Default: 10.3.4.0/24
    Description: "CIDR for second public subnet (AZ2)"

  PrivateSubnetCidr:
    Type: String
    Default: 10.3.2.0/24
    Description: "CIDR for private subnet"

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Default: day3key
    Description: "Existing EC2 key pair to use for SSH access"

# ----------------------------
# MAPPINGS = static lookup tables
# Example: region â†’ AMI ID
# ----------------------------
Mappings:
  RegionMap:
    eu-west-2:                              # London region
      AMI: ami-0123456789abcdef0
    us-east-1:                              # N. Virginia region
      AMI: ami-0abcdef1234567890
    ap-south-1:                             # Mumbai region
      AMI: ami-0a1b2c3d4e5f67890

# ----------------------------
# CONDITIONS = logical checks based on parameters
# ----------------------------
Conditions:
  IsProd: !Equals [ !Ref EnvType, prod ]    # evaluates TRUE if EnvType=prod

# ----------------------------
# RESOURCES = actual AWS infrastructure
# ----------------------------
Resources:

  # --- VPC ---
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr               # uses parameter (not hard-coded)
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags: [{ Key: Name, Value: week8-vpc }]

  # --- Internet Gateway ---
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags: [{ Key: Name, Value: week8-igw }]

  AttachIgw:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # --- Public Subnet 1 ---
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1Cidr     # parameterised CIDR
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags: [{ Key: Name, Value: week8-public-1 }]

  # --- Public Subnet 2 ---
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2Cidr     # parameterised CIDR
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags: [{ Key: Name, Value: week8-public-2 }]

  # --- Private Subnet ---
  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnetCidr     # parameterised CIDR
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags: [{ Key: Name, Value: week8-private }]

  # --- Routing (Public + Private with NAT) ---
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  AssocPublicSubnet1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  AssocPublicSubnet2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NAT:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NAT

  AssocPrivateSubnet:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable

  # --- Security Groups ---
  PublicSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH + HTTP
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  PrivateSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH from PublicSG
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref PublicSG
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  ALBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP from internet
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  # --- Launch Template (for ASG) ---
  WebLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: week8-web-template
      LaunchTemplateData:
        # Mapping + Condition used here
        ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]   # Mapping: pick AMI per region
        InstanceType: !If [IsProd, t3.large, t3.micro]             # Condition: prod=large, dev=small
        KeyName: !Ref KeyName                                      # Parameter for SSH key
        SecurityGroupIds: [ !Ref PublicSG ]
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            apt-get update -y
            apt-get install -y nginx
            INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
            echo "<h1>Hello from ${INSTANCE_ID} (${EnvType})</h1>" > /var/www/html/index.html
            systemctl enable nginx
            systemctl start nginx

  # --- ALB ---
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: week8-alb
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups: [ !Ref ALBSG ]
      Scheme: internet-facing
      Type: application
      IpAddressType: ipv4

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP
      TargetType: instance
      HealthCheckProtocol: HTTP
      HealthCheckPort: "80"
      HealthCheckPath: /
      Matcher: { HttpCode: 200 }

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup

  # --- Auto Scaling Group ---
  WebASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      MinSize: 1
      MaxSize: 3
      DesiredCapacity: 2
      LaunchTemplate:
        LaunchTemplateId: !Ref WebLaunchTemplate
        Version: !GetAtt WebLaunchTemplate.LatestVersionNumber
      TargetGroupARNs:
        - !Ref ALBTargetGroup

# ----------------------------
# OUTPUTS
# ----------------------------
Outputs:
  ALBDNSName:
    Description: "DNS name of the Application Load Balancer"
    Value: !GetAtt ALB.DNSName
